definitions:
  models.Container:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  models.ContainerRequest:
    properties:
      name:
        type: string
    type: object
  models.Publication:
    properties:
      container:
        $ref: '#/definitions/models.Container'
      created:
        example: "2024-01-16T12:00:00Z"
        type: string
      deleted:
        example: "2024-01-16T12:45:00Z"
        type: string
      id:
        type: integer
      idContainer:
        type: integer
      idTopic:
        type: integer
      payload:
        type: string
      timestamp:
        type: integer
      topic:
        $ref: '#/definitions/models.Topic'
      updated:
        example: "2024-01-16T12:00:00Z"
        type: string
    type: object
  models.PublicationRequest:
    properties:
      container:
        $ref: '#/definitions/models.Container'
      idContainer:
        type: integer
      idTopic:
        type: integer
      payload:
        type: string
      timestamp:
        type: integer
      topic:
        $ref: '#/definitions/models.Topic'
    type: object
  models.Session:
    properties:
      clean:
        type: boolean
      clientId:
        type: string
      container:
        $ref: '#/definitions/models.Container'
      created:
        example: "2024-01-16T12:00:00Z"
        type: string
      deleted:
        example: "2024-01-16T12:45:00Z"
        type: string
      id:
        type: integer
      idContainer:
        type: integer
      keepAlive:
        type: integer
      password:
        type: string
      updated:
        example: "2024-01-16T12:00:00Z"
        type: string
      username:
        type: string
    type: object
  models.SessionRequest:
    properties:
      clean:
        type: boolean
      clientId:
        type: string
      idContainer:
        type: integer
      keepAlive:
        type: integer
      password:
        type: string
      username:
        type: string
    type: object
  models.Subscription:
    properties:
      container:
        $ref: '#/definitions/models.Container'
      created:
        example: "2024-01-16T12:00:00Z"
        type: string
      deleted:
        example: "2024-01-16T12:45:00Z"
        type: string
      id:
        type: integer
      idContainer:
        type: integer
      idSession:
        type: integer
      idTopic:
        type: integer
      session:
        $ref: '#/definitions/models.Session'
      topic:
        $ref: '#/definitions/models.Topic'
      updated:
        example: "2024-01-16T12:00:00Z"
        type: string
    type: object
  models.SubscriptionRequest:
    properties:
      container:
        $ref: '#/definitions/models.Container'
      idContainer:
        type: integer
      idTopic:
        type: integer
      sessionId:
        type: string
      topic:
        $ref: '#/definitions/models.Topic'
    type: object
  models.Topic:
    properties:
      config:
        $ref: '#/definitions/models.TopicConfig'
      container:
        $ref: '#/definitions/models.Container'
      created:
        example: "2024-01-16T12:00:00Z"
        type: string
      deleted:
        example: "2024-01-16T12:45:00Z"
        type: string
      id:
        type: integer
      idContainer:
        type: integer
      name:
        type: string
      updated:
        example: "2024-01-16T12:00:00Z"
        type: string
    type: object
  models.TopicConfig:
    properties:
      payload:
        type: string
      qos:
        type: integer
      retained:
        description: Indica se a mensagem é retida ou não
        type: boolean
      securityRule:
        description: Regra de segurança aplicada ao tópico
        type: string
    type: object
  models.TopicRequest:
    properties:
      config:
        $ref: '#/definitions/models.TopicConfig'
      idContainer:
        type: integer
      name:
        type: string
    type: object
info:
  contact: {}
paths:
  /containers:
    get:
      description: Get all containers
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Container'
            type: array
      summary: Get all containers
      tags:
      - Container
    post:
      consumes:
      - application/json
      description: Create a new container
      parameters:
      - description: Container object that needs to be added
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.ContainerRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.ContainerRequest'
      summary: Create a new container
      tags:
      - Container
  /containers/{id}:
    get:
      description: Get a container by ID
      parameters:
      - description: Container ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Container'
      summary: Get a container by ID
      tags:
      - Container
    put:
      consumes:
      - application/json
      description: Update a container by ID
      parameters:
      - description: Container ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated container object
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.ContainerRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ContainerRequest'
      summary: Update a container by ID
      tags:
      - Container
  /publications:
    get:
      description: Get all publications
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Publication'
            type: array
      summary: Get all publications
      tags:
      - Publications
    post:
      consumes:
      - application/json
      description: Create a new publication
      parameters:
      - description: Publication object that needs to be added
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.PublicationRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.PublicationRequest'
      summary: Create a new publication
      tags:
      - Publications
  /publications/{id}:
    get:
      description: Get a publication by ID
      parameters:
      - description: Publication ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Publication'
      summary: Get a publication by ID
      tags:
      - Publications
    put:
      consumes:
      - application/json
      description: Update a publication by ID
      parameters:
      - description: Publication ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated publication object
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.PublicationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PublicationRequest'
      summary: Update a publication by ID
      tags:
      - Publications
  /sessions:
    get:
      description: Get all sessions
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Session'
            type: array
      summary: Get all sessions
      tags:
      - Sessions
    post:
      consumes:
      - application/json
      description: Create a new session
      parameters:
      - description: Session object that needs to be added
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.SessionRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.SessionRequest'
      summary: Create a new session
      tags:
      - Sessions
  /sessions/{id}:
    get:
      description: Get a session by ID
      parameters:
      - description: Session ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Session'
      summary: Get a session by ID
      tags:
      - Sessions
    put:
      consumes:
      - application/json
      description: Update a session by ID
      parameters:
      - description: Session ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated session object
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.SessionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SessionRequest'
      summary: Update a session by ID
      tags:
      - Sessions
  /subscriptions:
    get:
      description: Get all subscriptions
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Subscription'
            type: array
      summary: Get all subscriptions
      tags:
      - Subscriptions
    post:
      consumes:
      - application/json
      description: Create a new subscription
      parameters:
      - description: Subscription object that needs to be added
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.Subscription'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Subscription'
      summary: Create a new subscription
      tags:
      - Subscriptions
  /subscriptions/{id}:
    get:
      description: Get a subscription by ID
      parameters:
      - description: Subscription ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Subscription'
      summary: Get a subscription by ID
      tags:
      - Subscriptions
    put:
      consumes:
      - application/json
      description: Update a subscription by ID
      parameters:
      - description: Subscription ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated subscription object
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.SubscriptionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SubscriptionRequest'
      summary: Update a subscription by ID
      tags:
      - Subscriptions
  /topics:
    get:
      description: Get all topics
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Topic'
            type: array
      summary: Get all topics
      tags:
      - Topic
    post:
      consumes:
      - application/json
      description: Create a new topic
      parameters:
      - description: Topic object that needs to be added
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.TopicRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Topic'
      summary: Create a new topic
      tags:
      - Topic
  /topics/{id}:
    get:
      description: Get a topic by ID
      parameters:
      - description: Topic ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Topic'
      summary: Get a topic by ID
      tags:
      - Topic
    put:
      consumes:
      - application/json
      description: Update a topic by ID
      parameters:
      - description: Topic ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated topic object
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.TopicRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.TopicRequest'
      summary: Update a topic by ID
      tags:
      - Topic
  /topics/ByIdContainer/{IdContainer}:
    get:
      description: Get all topics
      parameters:
      - description: Topic by IdContainer
        in: path
        name: IdContainer
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Topic'
            type: array
      summary: Get all topics
      tags:
      - Topic
swagger: "2.0"

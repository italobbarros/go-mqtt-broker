definitions:
  models.Container:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  models.ContainerRequest:
    properties:
      name:
        type: string
    type: object
  models.ContainersInfoResponse:
    properties:
      countPublishers:
        type: integer
      countSession:
        type: integer
      countSubscribers:
        type: integer
      id:
        type: integer
    type: object
  models.GenericResponse:
    properties:
      detail:
        type: string
    type: object
  models.Publish:
    properties:
      id:
        type: integer
      idSession:
        type: integer
      payload:
        type: string
      qos:
        type: integer
      session:
        $ref: '#/definitions/models.Session'
      timestamp:
        example: "2024-01-16T12:00:00Z"
        type: string
      topicName:
        type: string
    type: object
  models.PublishRequest:
    properties:
      idSession:
        type: integer
      payload:
        type: string
      qos:
        type: integer
      topicName:
        type: string
      topicRetained:
        description: Indica se a mensagem é retida ou não
        type: boolean
    type: object
  models.PublishResponse:
    properties:
      id:
        type: integer
      numberTimestamp:
        type: integer
      payload:
        type: string
      qos:
        type: integer
      session:
        $ref: '#/definitions/models.SessionInfoResponse'
      timestamp:
        example: "2024-01-16T12:00:00Z"
        type: string
      topicName:
        type: string
      topicRetained:
        description: Indica se a mensagem é retida ou não
        type: boolean
    type: object
  models.Session:
    properties:
      clean:
        type: boolean
      clientId:
        type: string
      container:
        $ref: '#/definitions/models.Container'
      created:
        example: "2024-01-16T12:00:00Z"
        type: string
      id:
        type: integer
      idContainer:
        type: integer
      keepAlive:
        type: integer
      password:
        type: string
      updated:
        example: "2024-01-16T12:00:00Z"
        type: string
      username:
        type: string
    type: object
  models.SessionInfoResponse:
    properties:
      clean:
        type: boolean
      clientId:
        type: string
      container:
        $ref: '#/definitions/models.Container'
      id:
        type: integer
      keepAlive:
        type: integer
    type: object
  models.SessionRequest:
    properties:
      clean:
        type: boolean
      clientId:
        type: string
      idContainer:
        type: integer
      keepAlive:
        type: integer
      password:
        type: string
      username:
        type: string
    type: object
  models.SessionResponse:
    properties:
      clean:
        type: boolean
      clientId:
        type: string
      container:
        $ref: '#/definitions/models.Container'
      created:
        example: "2024-01-16T12:00:00Z"
        type: string
      id:
        type: integer
      keepAlive:
        type: integer
      password:
        type: string
      updated:
        example: "2024-01-16T12:00:00Z"
        type: string
      username:
        type: string
    type: object
  models.SessionUpdateRequest:
    properties:
      clean:
        type: boolean
      idContainer:
        type: integer
      keepAlive:
        type: integer
      password:
        type: string
      username:
        type: string
    type: object
  models.Subscription:
    properties:
      created:
        example: "2024-01-16T12:00:00Z"
        type: string
      id:
        type: integer
      idSession:
        type: integer
      idTopic:
        type: integer
      session:
        $ref: '#/definitions/models.Session'
      topic:
        $ref: '#/definitions/models.Topic'
      updated:
        example: "2024-01-16T12:00:00Z"
        type: string
    type: object
  models.SubscriptionRequest:
    properties:
      idSession:
        type: integer
      idTopic:
        type: integer
    type: object
  models.Topic:
    properties:
      created:
        example: "2024-01-16T12:00:00Z"
        type: string
      id:
        type: integer
      idPublish:
        type: integer
      name:
        type: string
      publish:
        $ref: '#/definitions/models.Publish'
      retained:
        description: Indica se a mensagem é retida ou não
        type: boolean
      updated:
        example: "2024-01-16T12:00:00Z"
        type: string
    type: object
  models.TopicRequest:
    properties:
      idPublish:
        type: integer
    type: object
info:
  contact: {}
paths:
  /containers:
    post:
      consumes:
      - application/json
      description: Create a new container
      parameters:
      - description: Container object that needs to be added
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.ContainerRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.GenericResponse'
      summary: Create a new container
      tags:
      - Containers
  /containers/{Name}:
    delete:
      description: Delete a container by name
      parameters:
      - description: Container Name
        in: path
        name: Name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/models.GenericResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.GenericResponse'
      summary: Delete a container by name
      tags:
      - Containers
  /containers/{id}:
    get:
      description: Get a container by ID
      parameters:
      - description: Container ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Container'
      summary: Get a container by ID
      tags:
      - Containers
  /containers/all:
    get:
      description: Get all containers info
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ContainersInfoResponse'
            type: array
      summary: Get all containers info
      tags:
      - Containers
  /publisher:
    post:
      consumes:
      - application/json
      description: Create a new publish
      parameters:
      - description: Publish object that needs to be added
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.PublishRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.GenericResponse'
      summary: Create a new publish
      tags:
      - Publisher
  /publisher/all:
    get:
      description: Get all publisher
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.PublishResponse'
            type: array
      summary: Get all publisher
      tags:
      - Publisher
  /publisher/historic:
    get:
      description: Get a publish by TopicName
      parameters:
      - description: Topic Name
        in: query
        name: TopicName
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.PublishResponse'
            type: array
      summary: Get a publish by TopicName
      tags:
      - Publisher
  /sessions:
    delete:
      description: Delete a session ClientId
      parameters:
      - description: Session ClientId
        in: query
        name: ClientId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/models.GenericResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.GenericResponse'
      summary: Delete a session ClientId
      tags:
      - Sessions
    get:
      description: Get a session by ClientId
      parameters:
      - description: Session ClientId
        in: query
        name: ClientId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SessionResponse'
      summary: Get a session by ClientId
      tags:
      - Sessions
    post:
      consumes:
      - application/json
      description: Create a new session
      parameters:
      - description: Session object that needs to be added
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.SessionRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.SessionRequest'
      summary: Create a new session
      tags:
      - Sessions
    put:
      consumes:
      - application/json
      description: Update a session by ClientId
      parameters:
      - description: Session ClientId
        in: query
        name: ClientId
        required: true
        type: string
      - description: Updated session object
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.SessionUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GenericResponse'
      summary: Update a session by ClientId
      tags:
      - Sessions
  /sessions/all:
    get:
      description: Get all sessions
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Session'
            type: array
      summary: Get all sessions
      tags:
      - Sessions
  /subscriptions:
    get:
      description: Get all subscriptions
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Subscription'
            type: array
      summary: Get all subscriptions
      tags:
      - Subscriptions
    post:
      consumes:
      - application/json
      description: Create a new subscription
      parameters:
      - description: Subscription object that needs to be added
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.Subscription'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Subscription'
      summary: Create a new subscription
      tags:
      - Subscriptions
  /subscriptions/{id}:
    get:
      description: Get a subscription by ID
      parameters:
      - description: Subscription ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Subscription'
      summary: Get a subscription by ID
      tags:
      - Subscriptions
    put:
      consumes:
      - application/json
      description: Update a subscription by ID
      parameters:
      - description: Subscription ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated subscription object
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.SubscriptionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SubscriptionRequest'
      summary: Update a subscription by ID
      tags:
      - Subscriptions
  /topics:
    get:
      description: Get Topic by Name
      parameters:
      - description: Topic by Name
        in: query
        name: Name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Topic'
      summary: Get Topic by Name
      tags:
      - Topic
  /topics/{Name}:
    delete:
      description: Delete a topic by name
      parameters:
      - description: Topic Name
        in: path
        name: Name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/models.GenericResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.GenericResponse'
      summary: Delete a topic by name
      tags:
      - Topic
  /topics/{id}:
    get:
      description: Get a topic by ID
      parameters:
      - description: Topic ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Topic'
      summary: Get a topic by ID
      tags:
      - Topic
    put:
      consumes:
      - application/json
      description: Update a topic by ID
      parameters:
      - description: Topic ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated topic object
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.TopicRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.TopicRequest'
      summary: Update a topic by ID
      tags:
      - Topic
  /topics/all:
    get:
      description: Get all topics
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Topic'
            type: array
      summary: Get all topics
      tags:
      - Topic
swagger: "2.0"
